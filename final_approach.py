import torch
import pybullet as p
import pybullet_data
import time
from train_model import RobotNN

model = RobotNN()
model.load_state_dict(torch.load("robot_model.pth"))
model.eval()

# Ø±Ø§Ù‡â€ŒØ§Ù†Ø¯Ø§Ø²ÛŒ PyBullet
p.connect(p.GUI)
p.setAdditionalSearchPath(pybullet_data.getDataPath())  
p.setGravity(0, 0, -9.8)

# Ø¨Ø§Ø±Ú¯Ø°Ø§Ø±ÛŒ Ø±Ø¨Ø§Øª
plane_id = p.loadURDF("plane.urdf")
robot_id = p.loadURDF("r2d2.urdf", basePosition=[0, 0, 0.5])

# Ø§Ø¬Ø±Ø§ÛŒ Ú©Ù†ØªØ±Ù„ Ø±Ø¨Ø§Øª Ø¨Ø§ Ù…Ø¯Ù„ Ù‡ÙˆØ´ Ù…ØµÙ†ÙˆØ¹ÛŒ
for i in range(500):
    pos, _ = p.getBasePositionAndOrientation(robot_id)
    vel = p.getBaseVelocity(robot_id)

    # Ø¢Ù…Ø§Ø¯Ù‡â€ŒØ³Ø§Ø²ÛŒ Ø¯Ø§Ø¯Ù‡ Ø¨Ø±Ø§ÛŒ Ù…Ø¯Ù„
    state = torch.tensor([[pos[0], pos[1], vel[0][0], vel[0][1], 0]], dtype=torch.float32)
    
    # Ù¾ÛŒØ´â€ŒØ¨ÛŒÙ†ÛŒ Ø­Ø±Ú©Øª Ø¨Ø¹Ø¯ÛŒ Ø¨Ø§ Ù…Ø¯Ù„
    action = model(state).detach().numpy().flatten()

    # Ø§Ø¹Ù…Ø§Ù„ Ø­Ø±Ú©Øª Ø¨Ù‡ Ø±Ø¨Ø§Øª
    new_pos = [pos[0] + action[0], pos[1] + action[1], pos[2]]
    p.resetBasePositionAndOrientation(robot_id, new_pos, [0, 0, 0, 1])

    p.stepSimulation()
    time.sleep(1./240.)

p.disconnect()
print("ðŸš€ Ø±Ø¨Ø§Øª Ø¨Ø§ Ù…Ø¯Ù„ ÛŒØ§Ø¯Ú¯ÛŒØ±ÛŒ Ù…Ø§Ø´ÛŒÙ†ÛŒ Ø­Ø±Ú©Øª Ú©Ø±Ø¯! ðŸŽ‰")
